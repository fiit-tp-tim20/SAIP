import React, { useState, useContext, useEffect } from "react";
import { useQuery } from "react-query";
import Slider from "../components/slider/Slider";
import Tutorial from "../components/modal/Tutorial";
import useCompanyStore from "../store/Company";
import { getCompanyStats } from "../api/GetCompanyStats";
import CompanyGraph from "../components/statisticsGraph/CompanyGraph";
import getCompanyReport from "../api/GetCompanyReport";

// @ts-ignore
import { MyContext } from "../api/MyContext.js";
import getGeneralInfo from "../api/CompanyInfo";

function Company() {
	const data = useContext(MyContext);
	// @ts-ignore
	const turn = data.num;
	const { isLoading: statsIsLoading, data: statsData } = useQuery(["getCompanyStats"], getCompanyStats);
	// @ts-ignore
	const { data: reportData } = useQuery(["companyReport", turn], () => getCompanyReport(turn - 1));
	const { isLoading, data: budget_data, refetch } = useQuery("companyInfo", () => getGeneralInfo());
	const [plusCash, setPlusCash] = useState(0);

	const {
		productCount,
		productCountChecked,
		productPrice,
		productPriceChecked,
		capitalInvestments,
		capitalInvestmentsChecked,
		setProductCount,
		setProductCountChecked,
		setProductPrice,
		setProductPriceChecked,
		setCapitalInvestments,
		setCapitalInvestmentsChecked,
	} = useCompanyStore();

	// State for managing tutorial visibility
	const [isTutorialOpen, setTutorialOpen] = useState<boolean>(true);

	// State for managing tutorial visibility
	const [tutorialStates, setTutorialStates] = useState({
		production: false,
		price: false,
		invest: false,
	});

	const openTutorial = (tutorialKey: string) => {
		setTutorialStates((prevStates) => ({
			...prevStates,
			[tutorialKey]: true,
		}));
	};

	const closeTutorial = (tutorialKey: string) => {
		setTutorialStates((prevStates) => ({
			...prevStates,
			[tutorialKey]: false,
		}));
	};
	useEffect(() => {
		refetch();
	}, [turn]);
	useEffect(() => {
		if (!isLoading) {
			try {
				setPlusCash(budget_data.bonus_spendable_cash);
			} catch (e) {
				console.log(e);
			}
		}
	}, [data]);

	return (
		<div className="flex flex-col xl:w-[1280px] md:w-[900px] w-[600px]">
			<h1 className="my-4">≈†tatistiky</h1>
			<div className="background-container my-2 flex flex-col rounded-2xl p-6">
				{statsIsLoading ? (
					<div>Loading...</div>
				) : (
					<CompanyGraph
						manufactured={statsData.manufactured}
						price={statsData.sell_price}
						stored={statsData.inventory}
						capacity={statsData.capacity}
					/>
				)}
			</div>
			<div className="flex flex-col">
				<h1 className="my-4">Rozdelenie financi√≠</h1>
				<div className="flex flex-col background-container p-6 rounded-2xl my-2">
					<div className="py-2 flex flex-row items-center justify-between">
						<h2>Poƒçet produkovan√Ωch kusov</h2>
						{/* Add a button to open the tutorial */}
						<button
							onClick={() => openTutorial("production")}
							className="button-light font-bold py-2 px-4 rounded-lg focus:outline-none focus:shadow-outline"
						>
							üí°
						</button>
						{tutorialStates.production && (
							<Tutorial
								isOpen={tutorialStates.production}
								closeModal={() => closeTutorial("production")}
								textTitle="Poƒçet produkovan√Ωch kusov Tip üí°"
								textContent={
									<div>
										<p>
											Optim√°lny poƒçet produkovan√Ωch kusov do ƒèal≈°ieho obdobia je 90% maxim√°lnej
											v√Ωrobnej kapacity.
										</p>
										<br />
										= 0,9 * (hodnota tov√°rne / 500)
										<br />
										<p>
											Ka≈æd√Ωch 500‚Ç¨ z celkovej hodnoty tov√°rne predstavuje jeden kus ktor√Ω m√¥≈æeme
											vyrobi≈•.
										</p>{" "}
										<br />
										<p style={{ fontSize: "14px" }}>
											Inform√°cie o minim√°lnej v√Ωrobnej kapacite m√¥≈æe n√°js≈• v: Dashboard -{">"}{" "}
											Spr√°va o spoloƒçnosti -{">"} Spr√°va o v√Ωrobe
										</p>
										<br />
										<p>
											{" "}
											Mysli na to, ≈æe ak vyrob√≠≈° pr√≠li≈° m√°lo produktov, bud√∫ tvoje jednotkov√©
											v√Ωrobn√© n√°klady vysok√© (veƒæk√Ω pr√≠spevok fixn√Ωch n√°kladov) a naopak, ak
											vyrob√≠≈° pr√≠li≈° veƒæa, bud√∫ tvoje v√Ωrobn√© n√°klady takisto vysok√© (pre≈•a≈æenie
											v√Ωroby).
										</p>
										<br />
										<b>
											Pri rozhodovan√≠ o poƒçte produkovan√Ωch kusov si zodpovedaj na tieto ot√°zky:
										</b>
										<ul style={{ listStyleType: "disc", marginLeft: "20px" }}>
											<li>
												ak√° je optim√°lna v√Ωroba z hƒæadiska minimaliz√°cie jednotkov√Ωch n√°kladov?
											</li>
											<li>ak√° je moja maxim√°lna v√Ωrobn√° kapacita?</li>
											<li>ako sa vyv√≠ja predaj mojich produktov?</li>
											<li>m√°m na sklade z√°soby u≈æ vyroben√Ωch kusov?</li>
											<li>ak√Ω je dopyt po mojich produktoch? M√°m nejak√© nesplnen√© objedn√°vky?</li>
										</ul>
									</div>
								}
							/>
						)}
					</div>
					<p className="pt-1">
						Poƒçet produkovan√Ωch kusov predstavuje rozhodnutie u≈æ√≠vateƒæa o v√Ωrobe na nasleduj√∫ce obdobie
						(nasleduj√∫ci kvart√°l). U≈æ√≠vateƒæ m√° mo≈ænos≈• voli≈• v√Ωrobu v intervale od 0 ks a≈æ po maxim√°lnu
						v√Ωrobn√∫ kapacitu.
					</p>
					<div className="py-2 flex flex-row items-center justify-between">
						<h3>Poƒçet kusov (ks)</h3>
						<div>
							<Slider
								min={1}
								max={reportData ? reportData.production.capacity : 1000}
								value={productCount}
								setValue={setProductCount}
								checked={productCountChecked}
								setChecked={setProductCountChecked}
								step={1}
								limitMin
								limitMax
							/>
						</div>
					</div>
				</div>
				<div className="flex flex-col background-container p-6 rounded-2xl my-2">
					<div className="py-2 flex flex-row items-center justify-between">
						<h2>Predajn√° cena</h2>
						{/* Add a button to open the tutorial */}
						<button
							onClick={() => openTutorial("price")}
							className="button-light font-bold py-2 px-4 rounded-lg focus:outline-none focus:shadow-outline"
						>
							üí°
						</button>
						{tutorialStates.price && (
							<Tutorial
								isOpen={tutorialStates.price}
								closeModal={() => closeTutorial("price")}
								textTitle="Predajn√° cena Tip üí°"
								textContent={
									<div>
										<p>Maxim√°lna predajn√° cena je 15 000 ‚Ç¨. </p>
										<br />
										<p>
											Ak chce≈° dosiahnu≈• zisk, tvoja predajn√° cena mus√≠ by≈• v√§ƒç≈°ia ako celkov√©
											jednotkov√© n√°klady. Urƒçi si strat√©giu akou chce≈° postupova≈• (n√≠zka cena,
											vysok√° cena, priemern√° cena). Analyzuj situ√°ciu na trhu a sna≈æ sa vyu≈æi≈•
											dieru na trhu. Mysli na to, ≈æe ka≈æd√Ω z√°kazn√≠k sa spr√°va inak, priƒçom cena je
											najv√§ƒç≈°√≠m faktorom jeho rozhodnutia.
										</p>
									</div>
								}
							/>
						)}
					</div>
					<p className="pt-1">
						Predajn√° cena je cena, za ktor√∫ sa pred√°va produkt z√°kazn√≠kovi. Predajn√° cena je kƒæ√∫ƒçov√Ωm
						faktorom pri rozhodovan√≠ z√°kazn√≠ka o n√°kupe produktu a je d√¥le≈æitou s√∫ƒças≈•ou trhov√©ho
						rozhodovania pre pred√°vaj√∫ceho. M√¥≈æe by≈• ovplyvnen√° mnoh√Ωmi faktormi, ako je napr√≠klad
						konkurencia, trhov√° situ√°cia, n√°klady na marketing a reklamu. Predajn√° cena je d√¥le≈æit√Ωm
						faktorom pre z√°kazn√≠ka aj pre pred√°vaj√∫ceho, preto≈æe m√¥≈æe ma≈• v√Ωznamn√Ω vplyv na rozhodnutie o
						n√°kupe a na celkov√Ω √∫spech podnikania.
					</p>
					<div className="py-2 flex flex-row items-center justify-between">
						<h3>Predajn√° cena (‚Ç¨/ks)</h3>
						<div>
							<Slider
								min={0}
								max={15000}
								value={productPrice}
								setValue={setProductPrice}
								checked={productPriceChecked}
								setChecked={setProductPriceChecked}
								step={10}
							/>
						</div>
					</div>
				</div>
				<div className="flex flex-col background-container p-6 rounded-2xl my-2">
					<div className="py-2 flex flex-row items-center justify-between">
						<h2>Invest√≠cie do kapit√°lu</h2>
						{/* Add a button to open the tutorial */}
						<button
							onClick={() => openTutorial("invest")}
							className="button-light font-bold py-2 px-4 rounded-lg focus:outline-none focus:shadow-outline"
						>
							üí°
						</button>
						{tutorialStates.invest && (
							<Tutorial
								isOpen={tutorialStates.invest}
								closeModal={() => closeTutorial("invest")}
								textTitle="Invest√≠cie do kapit√°lu Tip üí°"
								textContent={
									<div>
										<p>
											Mysli na to, ≈æe dlhodob√Ω majetok (tov√°re≈à) sa s ƒçasom znehodnocuje. Pe≈àa≈æn√©
											znehodnotenie dlhodob√©ho majetku naz√Ωvame odpisy. Ak niƒç neinvestuje≈° do
											kapit√°lu, klesne hodnota dlhodob√©ho majetku v nasleduj√∫com obdob√≠ o v√Ω≈°ku
											odpisov, ƒço znamen√°, ≈æe bude≈° schopn√Ω vyrobi≈• v ƒèal≈°om obdob√≠ menej kusov.
										</p>
										<p>
											Ka≈æd√Ωch 500 ‚Ç¨ investovan√Ωch do kapit√°lu <b>nad r√°mec odpisov</b>, zv√Ω≈°i
											v√Ωrobn√∫ kapacitu o 1 ks. Ak m√°≈° v podniku dostatoƒçne veƒæk√© finanƒçn√©
											prostriedky, m√¥≈æe≈° do kapit√°lu investova≈• aj viac ako m√°≈° rozpoƒçet. Tento
											bonus je vyjadren√Ω v kontrolnej li≈°te v z√°tvork√°ch.
										</p>
										<br />
										<p>
											Pri invest√≠ci√≠ do kapit√°lu zv√°≈æ: <br />
											koeficient vyu≈æitia v√Ωrobnej kapacity, dopyt po produktoch, veƒækos≈• z√°sob,
											zvolen√∫ cenov√∫ strat√©giu, spr√°vanie konkurentov na trhu, veƒækos≈• trhu.
										</p>
										<br/>
										<p>
											Ak tvoja v√Ωrobn√° kapacita presiahne 200 ks, st√∫pnu fixn√© n√°klady o 48 500 ‚Ç¨.
											N√°sledne v≈ædy po prekroƒçen√≠ v√Ωrobnej kapacity oƒèal≈°√≠ch 100 ks, st√∫pnu fixn√©
											n√°klady o 48 500 ‚Ç¨.
										</p>
									</div>
								}
							/>
						)}
					</div>
					<p className="pt-1">
						Invest√≠cie do kapit√°lu s√∫ invest√≠ciou do dlhodob√©ho majetku. V na≈°ej simul√°ci√≠ predstavuj√∫
						n√°klady na udr≈æiavanie, moderniz√°ciu a zv√§ƒç≈°ovanie tov√°rne. Pomocou invest√≠ci√≠ do kapit√°lu
						dok√°≈æe podnik zv√Ω≈°i≈• svoju maxim√°lnu v√Ωrobn√∫ kapacitu.
					</p>
					<div className="py-2 flex flex-row items-center justify-between">
						<h3>Invest√≠cia (‚Ç¨)</h3>
						<div>
							<Slider
								min={0}
								max={10000 + plusCash}
								value={capitalInvestments}
								setValue={setCapitalInvestments}
								checked={capitalInvestmentsChecked}
								setChecked={setCapitalInvestmentsChecked}
								step={10}
							/>
						</div>
					</div>
				</div>
			</div>
		</div>
	);
}

export default Company;
